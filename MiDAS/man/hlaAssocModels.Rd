% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MiDAS_stats.R
\name{hlaAssocModels}
\alias{hlaAssocModels}
\title{Association models for analysis of HLA alleles}
\usage{
hlaAssocModels(model = NULL, response, covariate, data)
}
\arguments{
\item{model}{String specifying statistical model to use.}

\item{response}{Character specifying response variables in \code{data}.}

\item{covariate}{Character specifying covariates in \code{data}.}

\item{data}{Data frame containing variables in the model.}
}
\value{
Function for fitting association model of choice, it takes allele
  number as an argument. Additional arguments can be passed as well.

  Returned function takes one required argument: HLA allele number
  (\code{allele}). Additional parameters are passed to statistical model
  function. Due to fact that allele numbers contains characters that have
  special meanings in formulas, they should be back quoted. This can be
  easily done with \link{backquote}. See examples section for general usage
  case.

  If model is equal to \code{NULL} names of available models are returned
  instead.
}
\description{
\code{hlaAssocModels} is a collection of preconfigured models for use with
HLA alleles count table.
}
\details{
\code{hlaAssocModels} is not indended to use by basic user.
}
\examples{
hla_calls_file <- system.file("extdata", "HLAHD_output_example.txt", package = "MiDAS")
hla_calls <- readHlaCalls(hla_calls_file)
hla_counts <- hlaCallsToCounts(hla_calls)
pheno_file <- system.file("extdata", "pheno_example.txt", package = "MiDAS")
pheno <- read.table(pheno_file, header = TRUE)
covar_file <- system.file("extdata", "covar_example.txt", package = "MiDAS")
covar <- read.table(covar_file, header = TRUE)
data <- dplyr::left_join(hla_counts, pheno, by = "ID")
data <- dplyr::left_join(data, covar, by = "ID")
response <- paste(colnames(pheno[, -1]), collapse = ", ")
covariate <- paste(colnames(covar[, -1]), collapse = " + ")
fun <- hlaAssocModels(model = "coxph",
                       response = response,
                       covariate = covariate,
                       data = data
)
allele <- backquote("A*01:01")
fun(allele)

}
